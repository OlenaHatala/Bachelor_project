import streamlit as st
import networkx as nx
import random
import time

from simulation.generators.flexible_graph_builder import RemainingNodeStrategy, FlexibleGraphBuilder
from simulation.generators.graph_factory import GraphGeneratorFactory
from simulation.models.antagonistic_spread_model import AntagonisticSpreadModel
from utils.graph_utils import assign_sources_dual
from simulation.models.state_enums import ANTAGONISTIC_STATE2COLOR
from utils.graph_visualization import plot_pie_chart, plot_state_dynamics, safe_visualize

st.set_page_config(layout="centered")
st.title("–ú–æ–¥–µ–ª—å –≤–ø–ª–∏–≤—É –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª —É –º–µ—Ä–µ–∂—ñ")

st.session_state.current_page = "antag_scrs"
if "antag_scrs__are_clusters" not in st.session_state:
    st.session_state["antag_scrs__are_clusters"] = None
if "antag_scrs__cluster_config" not in st.session_state:
    st.session_state["antag_scrs__cluster_config"] = None
if "antag_srcs__cluster_map" not in st.session_state:
    st.session_state["antag_srcs__cluster_map"] = None
if "antag_srcs__graph_generation_method" not in st.session_state:
    st.session_state["antag_srcs__graph_generation_method"] = None
if "antag_simulation_mode" not in st.session_state:
    st.session_state["antag_simulation_mode"] = None
if "antag_simulation_steps" not in st.session_state:
    st.session_state["antag_simulation_steps"] = None
if "antag_simulation_max_steps" not in st.session_state:
    st.session_state["antag_simulation_max_steps"] = None
if "antag_add_remaining" not in st.session_state:
    st.session_state.antag_add_remaining = None
    
tab1, tab2 = st.tabs(["–í–ª–∞—Å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–∞—Ñ–∞"])


with tab1:
    st.radio(
        label="**–°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –≥—Ä–∞—Ñ–∞?**",
        options=["–¢–∞–∫", "–ù—ñ"],
        index=0,
        horizontal=True,
        key="antag__use_clusters"
    )

    with st.form("custom_graph_form"):
        total_nodes = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤", min_value=1, value=4, step=1)

        cluster_sizes = []
        cluster_probs = []
        num_clusters = 0
        external_prob = 0.0
        remaining = 0
        # add_remaining = "–Ω–µ–º–∞—î –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –≤—É–∑–ª—ñ–≤"

        if st.session_state.antag__use_clusters == "–¢–∞–∫":
            st.session_state["antag_scrs__are_clusters"] = True

            num_clusters = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤", min_value=1, max_value=total_nodes, value=2, step=1)

            total_assigned = 0  

            for i in range(int(num_clusters)):
                st.markdown(
                    f"<div style='margin-bottom: 0.2rem; font-weight: 600;'>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—Ç–µ—Ä–∞ ‚Ññ{i+1}</div>",
                    unsafe_allow_html=True
                )

                cols = st.columns(2)
                with cols[0]:
                    max_available = total_nodes - total_assigned
                    default_value = min(2, max_available) if max_available > 0 else 0
                    size = st.number_input(
                        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤",
                        min_value=0,
                        max_value=total_nodes,
                        value=default_value,
                        key=f"size_{i}"
                    )
                with cols[1]:
                    prob = st.slider(
                        f"–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è",
                        min_value=0.0,
                        max_value=1.0,
                        value=0.5,
                        key=f"prob_{i}"
                    )

                total_assigned += size
                cluster_sizes.append(size)
                cluster_probs.append(prob)

                if total_assigned > total_nodes:
                    st.toast(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤ —É –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö ({total_assigned}) –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ–ø—É—Å—Ç–∏–º—É ({total_nodes})", icon="‚ö†Ô∏è")

            remaining = total_nodes - sum(cluster_sizes)

            intercluster_prob = st.slider(
                "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è –º—ñ–∂ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏",
                min_value=0.0,
                max_value=1.0,
                value=0.05
            )

            if remaining > 0:
                st.radio(
                    label="–©–æ —Ä–æ–±–∏—Ç–∏ –∑ –∑–∞–ª–∏—à–∫–æ–≤–∏–º–∏ –≤—É–∑–ª–∞–º–∏?",
                    options=["–î–æ–¥–∞—Ç–∏ –¥–æ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ –≤–∏–ø–∞–¥–∫–æ–≤–æ", "–ó–∞–ª–∏—à–∏—Ç–∏ –æ–∫—Ä–µ–º–æ"],
                    index=1,
                    key="antag_add_remaining"
                )

                if st.session_state.antag_add_remaining == "–ó–∞–ª–∏—à–∏—Ç–∏ –æ–∫—Ä–µ–º–æ":
                    external_prob = st.slider(
                        "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –≤—É–∑–ª—ñ–≤ –∑ —ñ–Ω—à–∏–º–∏",
                        0.0, 1.0, 0.2
                    )
                else:
                    external_prob = 0

        else:
            st.session_state["antag_scrs__are_clusters"] = False

            general_prob = st.slider("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è –º—ñ–∂ —É—Å—ñ–º–∞ –≤—É–∑–ª–∞–º–∏", 0.0, 1.0, 0.1)
            

        submit_custom = st.form_submit_button("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –º–µ—Ä–µ–∂—É")

        if submit_custom:
            builder = FlexibleGraphBuilder(total_nodes)

            if st.session_state.antag__use_clusters == "–¢–∞–∫":
                strategy = (
                    RemainingNodeStrategy.RANDOM
                    if st.session_state.antag_add_remaining == "–î–æ–¥–∞—Ç–∏ –¥–æ –∫–ª–∞—Å—Ç–µ—Ä—ñ–≤ –≤–∏–ø–∞–¥–∫–æ–≤–æ"
                    else RemainingNodeStrategy.SEPARATE
                )

                st.session_state["antag_scrs__cluster_config"] = {
                    "num_clusters": num_clusters,
                    "sizes": cluster_sizes,
                    "remaining": remaining,
                    "add_remaining": st.session_state.antag_add_remaining
                }

                G = builder.build_clustered_graph(
                    cluster_sizes=cluster_sizes,
                    cluster_probs=cluster_probs,
                    intercluster_prob=intercluster_prob,
                    remaining_strategy=strategy,
                    external_prob=external_prob
                )

                st.session_state["antag_srcs__cluster_map"] = builder.get_cluster_map()

            else:
                G = builder.build_flat_graph(general_prob)

            st.session_state.antag_simulation = AntagonisticSpreadModel(G)

            st.success("–ù–∞—Ç–∏—Å–Ω—É–ª–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞")
            st.session_state["antag_srcs__graph_generation_method"] = "custom"


with tab2:
    generator_factory = GraphGeneratorFactory()

    graph_type = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≥—Ä–∞—Ñ–∞", generator_factory.list_generators())

    with st.form("auto_graph_form"):
        n = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤", min_value=2, value=10, key="auto_n")

        if graph_type == "Small-World Graph":
            k = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–∞–π–±–ª–∏–∂—á–∏—Ö —Å—É—Å—ñ–¥—ñ–≤ (k)", min_value=1, max_value=n - 1, value=min(4, n - 1), key="auto_k")
            p = st.slider("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –ø–µ—Ä–µ–∑'—î–¥–Ω–∞–Ω–Ω—è (p)", min_value=0.0, max_value=1.0, value=0.1, key="auto_p")
            params = (n, k, p)
        elif graph_type == "Scale-Free Graph":
            params = (n,)
        else:
            params = (n,)

        submitted = st.form_submit_button("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –º–µ—Ä–µ–∂—É")

        if submitted:
            generator = generator_factory.get_generator(graph_type)
            if generator:
                G = generator(*params)
                st.session_state.antag_simulation = AntagonisticSpreadModel(G)
                st.session_state["antag_srcs__graph_generation_method"] = "auto"
                st.success("–ì—Ä–∞—Ñ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ.")
            else:
                st.error("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –≥—Ä–∞—Ñ–∞.")


if st.session_state.antag_srcs__graph_generation_method is not None:
    st.session_state.antag__simulation_steps_run = 0

    st.markdown("<h5 style='text-align: center;'>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª –ø–æ—à–∏—Ä–µ–Ω–Ω—è</h5>", unsafe_allow_html=True)

    colA, colB = st.columns(2)

    with colA:
        with st.expander("üî¥ –î–∂–µ—Ä–µ–ª–∞ —Ç–∏–ø—É A", expanded=False):
            total_sources_A = st.number_input(
                "–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª A",
                min_value=0,
                max_value=st.session_state.antag_simulation.get_num_nodes(),
                value=1,
                key="total_sources_A"
            )

            total_sources_A_allocated = 0

            if st.session_state.antag_srcs__graph_generation_method == "custom" and st.session_state.antag_scrs__are_clusters:
                cluster_config = st.session_state.get("antag_scrs__cluster_config", {})
                cluster_sizes = cluster_config.get("sizes", [])
                remaining = cluster_config.get("remaining", 0)

                for i, size in enumerate(cluster_sizes):
                    st.number_input(
                        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª A —É –∫–ª–∞—Å—Ç–µ—Ä—ñ ‚Ññ{i+1}",
                        min_value=0,
                        max_value=size,
                        value=0,
                        key=f"source_A_cluster_{i}"
                    )
                    total_sources_A_allocated += st.session_state.get(f"source_A_cluster_{i}", 0)

                if remaining > 0 and st.session_state.get("antag_add_remaining") == "–ó–∞–ª–∏—à–∏—Ç–∏ –æ–∫—Ä–µ–º–æ":
                    st.number_input(
                        "–î–∂–µ—Ä–µ–ª–∞ A —Å–µ—Ä–µ–¥ –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –≤—É–∑–ª—ñ–≤",
                        min_value=0,
                        max_value=remaining,
                        value=0,
                        key="outside_sources_A"
                    )
                    total_sources_A_allocated += st.session_state.get("outside_sources_A", 0)

                if total_sources_A_allocated > total_sources_A:
                    st.error(f"‚ö†Ô∏è –î–∂–µ—Ä–µ–ª A —É –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö –±—ñ–ª—å—à–µ ({total_sources_A_allocated}), –Ω—ñ–∂ –∑–∞–¥–∞–Ω–æ ({total_sources_A})")

            if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞ A"):
                st.session_state["sources_A_saved"] = True

    with colB:
        with st.expander("üîµ –î–∂–µ—Ä–µ–ª–∞ —Ç–∏–ø—É B", expanded=False):
            total_sources_B = st.number_input(
                "–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª B",
                min_value=0,
                max_value=st.session_state.antag_simulation.get_num_nodes(),
                value=1,
                key="total_sources_B"
            )

            total_sources_B_allocated = 0

            if st.session_state.antag_srcs__graph_generation_method == "custom" and st.session_state.antag_scrs__are_clusters:
                cluster_config = st.session_state.get("antag_scrs__cluster_config", {})
                cluster_sizes = cluster_config.get("sizes", [])
                remaining = cluster_config.get("remaining", 0)

                for i, size in enumerate(cluster_sizes):
                    st.number_input(
                        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª B —É –∫–ª–∞—Å—Ç–µ—Ä—ñ ‚Ññ{i+1}",
                        min_value=0,
                        max_value=size,
                        value=0,
                        key=f"source_B_cluster_{i}"
                    )
                    total_sources_B_allocated += st.session_state.get(f"source_B_cluster_{i}", 0)

                if remaining > 0 and st.session_state.get("antag_add_remaining") == "–ó–∞–ª–∏—à–∏—Ç–∏ –æ–∫—Ä–µ–º–æ":
                    st.number_input(
                        "–î–∂–µ—Ä–µ–ª–∞ B —Å–µ—Ä–µ–¥ –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö –≤—É–∑–ª—ñ–≤",
                        min_value=0,
                        max_value=remaining,
                        value=0,
                        key="outside_sources_B"
                    )
                    total_sources_B_allocated += st.session_state.get("outside_sources_B", 0)

                if total_sources_B_allocated > total_sources_B:
                    st.error(f"‚ö†Ô∏è –î–∂–µ—Ä–µ–ª B —É –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö –±—ñ–ª—å—à–µ ({total_sources_B_allocated}), –Ω—ñ–∂ –∑–∞–¥–∞–Ω–æ ({total_sources_B})")

            if st.button("–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞ B"):
                st.session_state["sources_B_saved"] = True


    if st.session_state.get("sources_A_saved") and st.session_state.get("sources_B_saved"):
        if st.session_state.antag_srcs__graph_generation_method == "custom" and st.session_state.antag__use_clusters == "–¢–∞–∫":
            cluster_map = st.session_state.get("antag_srcs__cluster_map", {})
            cluster_config = st.session_state.get("antag_scrs__cluster_config", {})
            total_nodes = st.session_state.antag_simulation.get_num_nodes()

            num_clusters = cluster_config.get("num_clusters", 0)
            cluster_sizes = cluster_config.get("sizes", [])
            remaining = cluster_config.get("remaining", 0)

            dist_A = [st.session_state.get(f"source_A_cluster_{i}", 0) for i in range(num_clusters)]
            outside_A = st.session_state.get("outside_sources_A", 0)

            dist_B = [st.session_state.get(f"source_B_cluster_{i}", 0) for i in range(num_clusters)]
            outside_B = st.session_state.get("outside_sources_B", 0)

            try:
                sources_A, sources_B = assign_sources_dual(
                    cluster_map=cluster_map,
                    source_dist_A=dist_A,
                    outside_A=outside_A,
                    source_dist_B=dist_B,
                    outside_B=outside_B,
                    total_nodes=total_nodes
                )

                st.session_state.antag_simulation.initialize(sources_A, sources_B)
                st.session_state["antag_sources_chosen"] = True
                st.success("–û–±–∏–¥–≤–∞ —Ç–∏–ø–∏ –¥–∂–µ—Ä–µ–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ.")
            except ValueError as e:
                st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø–æ–¥—ñ–ª—É –¥–∂–µ—Ä–µ–ª: {str(e)}")

        else:
            total_nodes = st.session_state.antag_simulation.get_num_nodes()
            total_A = st.session_state.get("total_sources_A", 0)
            total_B = st.session_state.get("total_sources_B", 0)

            if total_A + total_B > total_nodes:
                st.error(f"–°—É–º–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∂–µ—Ä–µ–ª ({total_A + total_B}) –ø–µ—Ä–µ–≤–∏—â—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤ —É –≥—Ä–∞—Ñ—ñ ({total_nodes})")
            else:
                all_nodes = list(range(total_nodes))
                sources_A = random.sample(all_nodes, total_A)
                remaining_nodes = list(set(all_nodes) - set(sources_A))
                sources_B = random.sample(remaining_nodes, total_B)

                st.session_state.antag_simulation.initialize(sources_A, sources_B)
                st.session_state["antag_sources_chosen"] = True
                st.success("–û–±–∏–¥–≤–∞ —Ç–∏–ø–∏ –¥–∂–µ—Ä–µ–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç–∞ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ.")


        with st.popover("–°–∏–º—É–ª—è—Ü—ñ—è"):
            # mode = st.radio(
            #     "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü—ñ—ó:",
            #     options=[
            #         "–§—ñ–∫—Å–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π",
            #         "–î–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ä—ñ–≤–Ω–æ–≤–∞–≥–∏ (–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º)"
            #     ]
            # )
            mode = "–§—ñ–∫—Å–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π"

            if mode == "–§—ñ–∫—Å–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π":
                num_steps = st.number_input(
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π",
                    min_value=1,
                    max_value=1000,
                    value=10,
                    step=1
                )
            elif mode == "–î–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ä—ñ–≤–Ω–æ–≤–∞–≥–∏ (–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º)":
                max_steps = st.number_input(
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π",
                    min_value=1,
                    max_value=10000,
                    value=50,
                    step=1
                )

            if st.button("–ü–æ—á–∞—Ç–∏ —Å–∏–º—É–ª—è—Ü—ñ—é"):
                if mode == "–§—ñ–∫—Å–æ–≤–∞–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ—Ç–µ—Ä–∞—Ü—ñ–π":
                    st.session_state["antag_simulation_mode"] = "fixed"
                    st.session_state["antag_simulation_steps"] = num_steps
                else:
                    st.session_state["antag_simulation_mode"] = "equilibrium"
                    st.session_state["antag_simulation_max_steps"] = max_steps

                st.session_state["antag_simulation_started"] = True

    
    else:
        with st.popover("–°–∏–º—É–ª—è—Ü—ñ—è"):
            st.warning("‚ùó –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±–æ—Ö —Ç–∏–ø—ñ–≤ –¥–∂–µ—Ä–µ–ª A —Ç–∞ B.")



    graph_placeholder = st.empty()
    plot_placeholder = st.empty()
    pie_placeholder = st.empty()

    if st.session_state.antag_simulation_mode == "fixed":
        for step in range(st.session_state.antag_simulation_steps):
            st.session_state.antag_simulation.step()
            st.session_state.antag__simulation_steps_run += 1

            # st.session_state.antag_simulation.visualize(graph_placeholder, st.session_state.antag__simulation_steps_run)
            safe_visualize(st.session_state.antag_simulation, graph_placeholder, step=st.session_state.antag__simulation_steps_run)

            state_counts = st.session_state.antag_simulation.state_counts
            state_count_now = st.session_state.antag_simulation.state_count

            plot_state_dynamics(state_counts, plot_placeholder, st.session_state.antag_simulation_steps, ANTAGONISTIC_STATE2COLOR)
            plot_pie_chart(state_count_now, pie_placeholder, ANTAGONISTIC_STATE2COLOR, step=st.session_state.antag__simulation_steps_run)

            time.sleep(1)


    if (st.session_state.antag_simulation_mode is None or st.session_state.antag__simulation_steps_run == st.session_state.antag_simulation_steps):
        if st.session_state.antag__simulation_steps_run == st.session_state.antag_simulation_steps:
            st.success("–°–∏–º—É–ª—è—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –¥–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ—Ç–µ—Ä–∞—Ü—ñ–π.")

    # st.session_state.antag_simulation.visualize(graph_placeholder)
    safe_visualize(st.session_state.antag_simulation, graph_placeholder)
