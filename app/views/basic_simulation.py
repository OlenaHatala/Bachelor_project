import streamlit as st
import networkx as nx
import matplotlib.pyplot as plt
import random 
from simulation.generators.basic_generator import get_available_generators

# st.write("# First page")

st.title("–ë–∞–∑–æ–≤–∞ —Å–∏–º—É–ª—è—Ü—ñ—è –ø–æ—à–∏—Ä–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó")

available_generators = get_available_generators()
graph_type = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≥—Ä–∞—Ñ–∞", list(available_generators.keys()))

with st.form("graph_parameters"):
    n = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—É–∑–ª—ñ–≤", min_value=1, value=20)

    if graph_type in ["Fast GNP Random Graph", "GNP Random Graph"]:
        p = st.slider("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è", min_value=0.0, max_value=1.0, value=0.2)
        params = (n, p)
    elif graph_type == "Dense GNM Random Graph":  # üõ†Ô∏è –≤–∏–ø—Ä–∞–≤–∏–≤ —Ç—É—Ç
        m = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–±–µ—Ä", min_value=0, max_value=n*(n-1)//2, value=0)
        params = (n, m)
    elif graph_type == "Barabasi-Albert Graph":
        m = st.slider("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–æ–≤–æ–≥–æ –≤—É–∑–ª–∞", min_value=1, max_value=n-1, value=1)
        params = (n, m)
    elif graph_type == "Scale-Free Graph": 
        params = (n,)

    submitted = st.form_submit_button("–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –º–µ—Ä–µ–∂—É")


if submitted:
    generator_func = available_generators[graph_type]
    G = generator_func(*params)

    pos = nx.spring_layout(G, seed=42)
    node_colors = ["lightsteelblue"] * len(G.nodes)
    nx.draw(G, pos, with_labels=True, node_color=node_colors, edgecolors="black", node_size=500)
    st.pyplot(plt.gcf())
    plt.clf()

    st.session_state.graph = G